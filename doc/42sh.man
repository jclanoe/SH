.TH 42SH 1 "28 October 2010" 42SH

.SH NAME
.P
42sh \- Epita SHell

.SH SYNOPSIS
.P
\fB42sh\fR [\fIOPTIONS\fR] [\fIFILE\fR]

.SH DESCRIPTION
.P
\fB42sh\fR is an \fBsh\fR-compatible command language interpreter that
executes commands read from the standard input or from a file.

.P
\fB42sh\fR is implemented in \fIC Language\fR. It repects the "EPITA C99 Coding
Style" and the standard \fISCL\fR (Shell Command Langage).

.SH OPTIONS
.P

In addition to the single-character shell options documented in the
description of the \fBset\fR builtin command, \fB42sh\fR
interprets the following options when it is invoked:
.PP
.PD 0
.TP 5
.B \-c \fB<\fIcommand\fB>\fR
If the \fB\-c \fRoption is present, then commands are read from \fIcommand\fR.
If there are arguments after the \fIcommand\fR, they are assigned to the
positional parameters, starting with \fB$0\fR.
.TP
.B [\-+]O [\fIshopt_option\fP]
\fIshopt_option\fP is one of the shell options accepted by the
\fBshopt\fP builtin (see
.SM
.B SHELL BUILTIN COMMANDS
below).
If \fIshopt_option\fP is present, \fB\-O\fP sets the value of that option;
\fB+O\fP unsets it.
If \fIshopt_option\fP is not supplied, the names and values of the shell
options accepted by \fBshopt\fP are printed on the standard output.
If the invocation option is \fB+O\fP, the output is displayed in a format
that may be reused as input.
.PD
.PP
.B 42sh
also interprets a number of multi-character options.
These options must appear on the command line before the
single-character options to be recognized.
.PP
.PD 0
.TP 5
.B \-\-ast\-print
Activate the ast printer.
.TP
.B \-\-norc
Do not read and execute the system wide initialization (desactivates the
ressource reader).
.TP
.B \-\-version
Show version information for this instance of
.B 42sh
on the standard output and exit successfully.
.PD

.SH INVOCATION
.P
.PP
An \fIinteractive\fP shell is one started without non-option arguments
and without the
.B \-c
option whose standard input and error are both connected to terminals.
.SM
.B PS1
is set and
.B $\-
includes
.B i
if
.B 42sh
is interactive, allowing a shell script or a startup file to test this state.

.SH DEFINITIONS
.P
.PP
The following definitions are used throughout the rest of this
document.
.PD 0
.TP 5
.B blank
A space or tab.
.TP
.B word
A sequence of characters considered as a single unit by the shell.
Also known as a
.BR token .
.TP
.B name
A
.I word
consisting only of alphanumeric characters and underscores, and
beginning with an alphabetic character or an underscore.  Also
referred to as an
.BR identifier .
.TP
.B metacharacter
A character that, when unquoted, separates words.  One of the following:
\fB|  & ; ( ) < > space tab\fP
.TP
.B control operator
A \fItoken\fP that performs a control function.  It is one of the following
symbols:
\fB|| & && ; ;; ( ) | <newline>\fP
.PD

.SH RESERVED WORDS
.P
\fIReserved words\fP are words that have a special meaning to the shell.
The following words are recognized as reserved when unquoted and either
the first word of a simple command (see
.SM
.B SHELL GRAMMAR
below) or the third word of a
.B case
or
.B for
command:
.B case do done elif else esac fi for if in then until while { } time [[ ]]

.SH SHELL GRAMMAR
.P
.SS Simple Commands
.PP
A \fIsimple command\fP is a sequence of optional variable assignments
followed by \fBblank\fP-separated words and redirections, and
terminated by a \fIcontrol operator\fP.  The first word
specifies the command to be executed, and is passed as argument zero.
The remaining words are passed as arguments to the invoked command.
.PP
The return value of a \fIsimple command\fP is its exit status, or
128+\fIn\^\fP if the command is terminated by signal
.IR n .
.SS Pipelines
.PP
A \fIpipeline\fP is a sequence of one or more commands separated by
the character
.BR | .
The format for a pipeline is:
.RS
.PP
\fIcommand\fP [\fB|\fP \fIcommand2\fP ...]
.RE
.PP
The standard output of
.I command
is connected via a pipe to the standard input of
.IR command2 .
This connection is performed before any redirections specified by the
command (see
.SM
.B REDIRECTION
below).
.PP
The return status of a pipeline is the exit status of the last
command.
.PP
Each command in a pipeline is executed as a separate process (i.e., in a
subshell).
.SS Lists
.PP
A \fIlist\fP is a sequence of one or more pipelines separated by one
of the operators
.BR ; ,
.BR & ,
.BR && ,
or
.BR \(bv\(bv ,
and optionally terminated by one of
.BR ; ,
.BR & ,
or
.BR <newline> .
.PP
Of these list operators,
.B &&
and
.B \(bv\(bv
have equal precedence, followed by
.B ;
and
.BR & ,
which have equal precedence.
.PP
A sequence of one or more newlines may appear in a \fIlist\fP instead
of a semicolon to delimit commands.
.PP
If a command is terminated by the control operator
.BR & ,
the shell executes the command in the \fIbackground\fP
in a subshell.  The shell does not wait for the command to
finish, and the return status is 0.  Commands separated by a
.B ;
are executed sequentially; the shell waits for each
command to terminate in turn.  The return status is the
exit status of the last command executed.
.PP
The control operators
.B &&
and
.B \(bv\(bv
denote AND lists and OR lists, respectively.
An AND list has the form
.RS
.PP
\fIcommand1\fP \fB&&\fP \fIcommand2\fP
.RE
.PP
.I command2
is executed if, and only if,
.I command1
returns an exit status of zero.
.PP
An OR list has the form
.RS
.PP
\fIcommand1\fP \fB\(bv\(bv\fP \fIcommand2\fP
.PP
.RE
.PP
.I command2
is executed if and only if
.I command1
returns a non-zero exit status.  The return status of
AND and OR lists is the exit status of the last command
executed in the list.
.SS Compound Commands
.PP
A \fIcompound command\fP is one of the following:
.TP
{ \fIlist\fP; }
\fIlist\fP is simply executed in the current shell environment.
\fIlist\fP must be terminated with a newline or semicolon.
This is known as a \fIgroup command\fP.
The return status is the exit status of
\fIlist\fP.
Note that unlike the metacharacters \fB(\fP and \fB)\fP, \fB{\fP and
\fB}\fP are \fIreserved words\fP and must occur where a reserved
word is permitted to be recognized.  Since they do not cause a word
break, they must be separated from \fIlist\fP by whitespace.
.TP
\fBfor\fP \fIname\fP [ \fBin\fP \fIword\fP ] ; \fBdo\fP \fIlist\fP ; \fBdone\fP
The list of words following \fBin\fP is expanded, generating a list
of items.
The variable \fIname\fP is set to each element of this list
in turn, and \fIlist\fP is executed each time.
If the \fBin\fP \fIword\fP is omitted, the \fBfor\fP command executes
\fIlist\fP once for each positional parameter that is set (see
.SM
.B PARAMETERS
below).
The return status is the exit status of the last command that executes.
If the expansion of the items following \fBin\fP results in an empty
list, no commands are executed, and the return status is 0.
.TP
\fBcase\fP \fIword\fP \fBin\fP [ [(] \fIpattern\fP [ \fB|\fP \fIpattern\fP ] \
... ) \fIlist\fP ;; ] ... \fBesac\fP
A \fBcase\fP command first expands \fIword\fP, and tries to match
it against each \fIpattern\fP in turn, using the same matching rules
as for pathname expansion (see
.B Pathname Expansion
below).
The \fIword\fP is expanded using tilde
expansion, parameter and variable expansion, arithmetic substitution,
command substitution, process substitution and quote removal.
Each \fIpattern\fP examined is expanded using tilde
expansion, parameter and variable expansion, arithmetic substitution,
command substitution, and process substitution.
When a match is found, the
corresponding \fIlist\fP is executed.  After the first match, no
subsequent matches are attempted.  The exit status is zero if no
pattern matches.  Otherwise, it is the exit status of the
last command executed in \fIlist\fP.
.TP
\fBif\fP \fIlist\fP; \fBthen\fP \fIlist;\fP \
[ \fBelif\fP \fIlist\fP; \fBthen\fP \fIlist\fP; ] ... \
[ \fBelse\fP \fIlist\fP; ] \fBfi\fP
The
.B if
.I list
is executed.  If its exit status is zero, the
\fBthen\fP \fIlist\fP is executed.  Otherwise, each \fBelif\fP
\fIlist\fP is executed in turn, and if its exit status is zero,
the corresponding \fBthen\fP \fIlist\fP is executed and the
command completes.  Otherwise, the \fBelse\fP \fIlist\fP is
executed, if present.  The exit status is the exit status of the
last command executed, or zero if no condition tested true.
.TP
\fBwhile\fP \fIlist\fP; \fBdo\fP \fIlist\fP; \fBdone\fP
.PD 0
.TP
\fBuntil\fP \fIlist\fP; \fBdo\fP \fIlist\fP; \fBdone\fP
.PD
The \fBwhile\fP command continuously executes the \fBdo\fP
\fIlist\fP as long as the last command in \fIlist\fP returns
an exit status of zero.  The \fBuntil\fP command is identical
to the \fBwhile\fP command, except that the test is negated;
the
.B do
.I list
is executed as long as the last command in
.I list
returns a non-zero exit status.
The exit status of the \fBwhile\fP and \fBuntil\fP commands
is the exit status
of the last \fBdo\fP \fIlist\fP command executed, or zero if
none was executed.

.SH COMMENTS
.P
In a non-interactive shell, or an interactive shell in which the
.B shopt
builtin is enabled (see
.SM
.B "SHELL BUILTIN COMMANDS"
below), a word beginning with
.B #
causes that word and all remaining characters on that line to
be ignored.

.SH QUOTING
.P

\fIQuoting\fP is used to remove the special meaning of certain
characters or words to the shell.  Quoting can be used to
disable special treatment for special characters, to prevent
reserved words from being recognized as such, and to prevent
parameter expansion.
.PP
Each of the \fImetacharacters\fP listed above under
.SM
.B DEFINITIONS
has special meaning to the shell and must be quoted if it is to
represent itself.
.PP
There are three quoting mechanisms: the
.IR "escape character" ,
single quotes, and double quotes.
.PP
A non-quoted backslash (\fB\e\fP) is the
.IR "escape character" .
It preserves the literal value of the next character that follows,
with the exception of <newline>.  If a \fB\e\fP<newline> pair
appears, and the backslash is not itself quoted, the \fB\e\fP<newline>
is treated as a line continuation (that is, it is removed from the
input stream and effectively ignored).
.PP
Enclosing characters in single quotes preserves the literal value
of each character within the quotes.  A single quote may not occur
between single quotes, even when preceded by a backslash.
.PP
Enclosing characters in double quotes preserves the literal value
of all characters within the quotes, with the exception of
.BR $ ,
.BR ` ,
.BR \e ,
and, when history expansion is enabled,
.BR ! .
The characters
.B $
and
.B `
retain their special meaning within double quotes.  The backslash
retains its special meaning only when followed by one of the following
characters:
.BR $ ,
.BR ` ,
\^\fB""\fP\^,
.BR \e ,
or
.BR <newline> .
A double quote may be quoted within double quotes by preceding it with
a backslash.
If enabled, history expansion will be performed unless an
.B !
appearing in double quotes is escaped using a backslash.
The backslash preceding the
.B !
is not removed.
.PP
The special parameters
.B *
and
.B @
have special meaning when in double
quotes (see
.SM
.B PARAMETERS
below).
.PP
Words of the form \fB$\fP\(aq\fIstring\fP\(aq are treated specially.  The
word expands to \fIstring\fP, with backslash-escaped characters replaced
as specified by the ANSI C standard.  Backslash escape sequences, if
present, are decoded as follows:
.RS
.PD 0
.TP
.B \ea
alert (bell)
.TP
.B \eb
backspace
.TP
.B \ee
an escape character
.TP
.B \ef
form feed
.TP
.B \en
new line
.TP
.B \er
carriage return
.TP
.B \et
horizontal tab
.TP
.B \ev
vertical tab
.TP
.B \e\e
backslash
.TP
.B \e\(aq
single quote
.TP
.B \e\fInnn\fP
the eight-bit character whose value is the octal value \fInnn\fP
(one to three digits)
.TP
.B \ex\fIHH\fP
the eight-bit character whose value is the hexadecimal value \fIHH\fP
(one or two hex digits)
.TP
.B \ec\fIx\fP
a control-\fIx\fP character
.PD
.RE
.LP
The expanded result is single-quoted, as if the dollar sign had
not been present.
.PP
A double-quoted string preceded by a dollar sign (\fB$\fP) will cause
the string to be translated according to the current locale.
If the current locale is \fBC\fP or \fBPOSIX\fP, the dollar sign
is ignored.
If the string is translated and replaced, the replacement is
double-quoted.

.SH PARAMETERS
.P
A
.I parameter
is an entity that stores values.
It can be a
.IR name ,
a number, or one of the special characters listed below under
.BR "Special Parameters" .
A
.I variable
is a parameter denoted by a
.IR name .
A variable has a \fIvalue\fP and zero or more \fIattributes\fP.
.PP
A parameter is set if it has been assigned a value.  The null string is
a valid value.
.PP
A
.I variable
may be assigned to by a statement of the form
.RS
.PP
\fIname\fP=[\fIvalue\fP]
.RE
.PP
If
.I value
is not given, the variable is assigned the null string.  All
.I values
undergo tilde expansion, parameter and variable expansion,
command substitution, arithmetic expansion, and quote
removal (see
.SM
.B EXPANSION
below).
Word splitting is not performed, with the exception
of \fB"$@"\fP as explained below under
.BR "Special Parameters" .
Pathname expansion is not performed.
.SS Special Parameters
.PP
The shell treats several parameters specially.  These parameters may
only be referenced; assignment to them is not allowed.
.PD 0
.TP
.B *
Expands to the positional parameters, starting from one.  When the
expansion occurs within double quotes, it expands to a single word
with the value of each parameter separated by the first character
of the
.SM
.B IFS
special variable.  That is, "\fB$*\fP" is equivalent
to "\fB$1\fP\fIc\fP\fB$2\fP\fIc\fP\fB...\fP", where
.I c
is the first character of the value of the
.SM
.B IFS
variable.  If
.SM
.B IFS
is unset, the parameters are separated by spaces.
If
.SM
.B IFS
is null, the parameters are joined without intervening separators.
.TP
.B @
Expands to the positional parameters, starting from one.  When the
expansion occurs within double quotes, each parameter expands to a
separate word.  That is, "\fB$@\fP" is equivalent to
"\fB$1\fP" "\fB$2\fP" ...
If the double-quoted expansion occurs within a word, the expansion of
the first parameter is joined with the beginning part of the original
word, and the expansion of the last parameter is joined with the last
part of the original word.
When there are no positional parameters, "\fB$@\fP" and
.B $@
expand to nothing (i.e., they are removed).
.TP
.B #
Expands to the number of positional parameters in decimal.
.TP
.B ?
Expands to the status of the most recently executed foreground
pipeline.
.TP
.B \-
Expands to the current option flags as specified upon invocation,
by the
.B set
builtin command, or those set by the shell itself
.TP
.B $
Expands to the process ID of the shell.  In a () subshell, it
expands to the process ID of the current shell, not the
subshell.
.TP
.B !
Expands to the process ID of the most recently executed background
(asynchronous) command.
.TP
.B _
At shell startup, set to the absolute pathname used to invoke the
shell or shell script being executed as passed in the environment
or argument list.
Subsequently, expands to the last argument to the previous command,
after expansion.
Also set to the full pathname used to invoke each command executed
and placed in the environment exported to that command.
When checking mail, this parameter holds the name of the mail file
currently being checked.
.PD
.SS Shell Variables
.PP
The following variables are set by the shell:
.PP
.PD 0
.TP
.B OLDPWD
The previous working directory as set by the
.B cd
command.
.TP
.B PWD
The current working directory as set by the
.B cd
command.
.TP
.B RANDOM
Each time this parameter is referenced, a random integer between
0 and 32767 is
generated.  The sequence of random numbers may be initialized by assigning
a value to
.SM
.BR RANDOM .
If
.SM
.B RANDOM
is unset, it loses its special properties, even if it is
subsequently reset.
.TP
.B SHELLOPTS
A colon-separated list of enabled shell options.
If this variable is in the environment when
.B 42sh
starts up, each shell option in the list will be enabled before
reading any startup files.
This variable is read-only.
.TP
.B UID
Expands to the user ID of the current user, initialized at shell startup.
This variable is readonly.
.PD
.PP
The following variables are used by the shell.  In some cases,
.B 42sh
assigns a default value to a variable; these cases are noted
below.
.PP
.PD 0
.TP
.B CDPATH
The search path for the
.B cd
command.
This is a colon-separated list of directories in which the shell looks
for destination directories specified by the
.B cd
command.
A sample value is
.if n ".:~:/usr".
.TP
.B HISTCONTROL
A colon-separated list of values controlling how commands are saved on
the history list.
If the list of values includes
.IR ignorespace ,
lines which begin with a
.B space
character are not saved in the history list.
A value of
.I ignoredups
causes lines matching the previous history entry to not be saved.
A value of
.I ignoreboth
is shorthand for \fIignorespace\fP and \fIignoredups\fP.
A value of
.IR erasedups
causes all previous lines matching the current line to be removed from
the history list before that line is saved.
Any value not in the above list is ignored.
If \fBHISTCONTROL\fP is unset, or does not include a valid value,
all lines read by the shell parser are saved on the history list,
subject to the value of
.BR HISTIGNORE .
The second and subsequent lines of a multi-line compound command are
not tested, and are added to the history regardless of the value of
.BR HISTCONTROL .
.TP
.B HISTSIZE
The number of commands to remember in the command history (see
.SM
.B HISTORY
below).  The default value is 500.
.TP
.B HOME
The home directory of the current user; the default argument for the
\fBcd\fP builtin command.
The value of this variable is also used when performing tilde expansion.
.TP
.B IFS
The
.I Internal Field Separator
that is used
for word splitting after expansion and to
split lines into words with the
.B read
builtin command.  The default value is
``<space><tab><newline>''.
.TP
.B PATH
The search path for commands.  It
is a colon-separated list of directories in which
the shell looks for commands (see
.SM
.B COMMAND EXECUTION
below).
A zero-length (null) directory name in the value of \fBPATH\fP indicates the
current directory.
A null directory name may appear as two adjacent colons, or as an initial
or trailing colon.
The default path is system-dependent,
and is set by the administrator who installs
.BR 42sh .
A common value is
``/usr/gnu/bin:/usr/local/bin:/usr/ucb:/bin:/usr/bin''.
.TP
.B PS1
The value of this parameter is expanded (see
.SM
.B PROMPTING
below) and used as the primary prompt string.  The default value is
``\fB\es\-\ev\e$ \fP''.
.TP
.B PS2
The value of this parameter is expanded as with
.B PS1
and used as the secondary prompt string.  The default is
``\fB> \fP''.
.TP
.B SHELL
The full pathname to the shell is kept in this environment variable.
If it is not set when the shell starts,
.B 42sh
assigns to it the full pathname of the current user's login shell.

.SH EXPANSION
.P
Expansion is performed on the command line after it has been split into
words.  There are two kinds of expansion performed:
.IR "tilde expansion" ,
.IR "pathname expansion" .
.PP
The order of expansions is: tilde expansion and pathname expansion.
.SS Tildes Expansion
.PP
If a word begins with an unquoted tilde character (`\fB~\fP'), all of
the characters preceding the first unquoted slash (or all characters,
if there is no unquoted slash) are considered a \fItilde-prefix\fP.
If none of the characters in the tilde-prefix are quoted, the
characters in the tilde-prefix following the tilde are treated as a
possible \fIlogin name\fP.
If this login name is the null string, the tilde is replaced with the
value of the shell parameter
.SM
.BR HOME .
If
.SM
.B HOME
is unset, the home directory of the user executing the shell is
substituted instead.
Otherwise, the tilde-prefix is replaced with the home directory
associated with the specified login name.
.PP
If the tilde-prefix is a `~+', the value of the shell variable
.SM
.B PWD
replaces the tilde-prefix.
If the tilde-prefix is a `~\-', the value of the shell variable
.SM
.BR OLDPWD ,
if it is set, is substituted.
If the characters following the tilde in the tilde-prefix consist
of a number \fIN\fP, optionally prefixed
by a `+' or a `\-', the tilde-prefix is replaced with the corresponding
element from the directory stack.
If the characters following the tilde in the tilde-prefix consist of a
number without a leading `+' or `\-', `+' is assumed.
.PP
If the login name is invalid, or the tilde expansion fails, the word
is unchanged.
.PP
Each variable assignment is checked for unquoted tilde-prefixes immediately
following a
.B :
or the first
.BR = .
In these cases, tilde expansion is also performed.
Consequently, one may use file names with tildes in assignments to
.SM
.BR PATH ,
and
.SM
.BR CDPATH ,
and the shell assigns the expanded value.
.SS Pathname Expansion
.PP
After word splitting,
.B 42sh
scans each word for the characters
.BR * ,
.BR ? ,
and
.BR [ .
If one of these characters appears, then the word is
regarded as a
.IR pattern ,
and replaced with an alphabetically sorted list of
file names matching the pattern.
When a pattern is used for pathname expansion,
the character
.B ``.''
at the start of a name or immediately following a slash
must be matched explicitly.
When matching a pathname, the slash character must always be
matched explicitly.
In other cases, the
.B ``.''
character is not treated specially.
.PP
\fBPattern Matching\fP
.PP
Any character that appears in a pattern, other than the special pattern
characters described below, matches itself.  The NUL character may not
occur in a pattern.  A backslash escapes the following character; the
escaping backslash is discarded when matching.
The special pattern characters must be quoted if
they are to be matched literally.
.PP
The special pattern characters have the following meanings:
.PP
.PD 0
.TP
.B *
Matches any string, including the null string.
.TP
.B ?
Matches any single character.
.TP
.B [...]
Matches any one of the enclosed characters.  A pair of characters
separated by a hyphen denotes a
\fIrange expression\fP;
any character that sorts between those two characters, inclusive,
using the current locale's collating sequence and character set,
is matched.  If the first character following the
.B [
is a
.B !
or a
.B ^
then any character not enclosed is matched.
A
.B \-
may be matched by including it as the first or last character
in the set.
A
.B ]
may be matched by including it as the first character
in the set.
.br
.sp 1
Within
.B [
and
.BR ] ,
\fIcharacter classes\fP can be specified using the syntax
\fB[:\fP\fIclass\fP\fB:]\fP, where \fIclass\fP is one of the
following classes defined in the POSIX standard:
.PP
.RS
.B
alnum alpha ascii blank cntrl digit graph lower print punct space upper word
xdigit
.br
A character class matches any character belonging to that class.
The \fBword\fP character class matches letters, digits, and the character _.
.br
.sp 1
Within
.B [
and
.BR ] ,
an \fIequivalence class\fP can be specified using the syntax
\fB[=\fP\fIc\fP\fB=]\fP, which matches all characters with the
same collation weight (as defined by the current locale) as
the character \fIc\fP.
.br
.sp 1
Within
.B [
and
.BR ] ,
the syntax \fB[.\fP\fIsymbol\fP\fB.]\fP matches the collating symbol
\fIsymbol\fP.

.SH REDIRECTION
.P
Before a command is executed, its input and output
may be
.I redirected
using a special notation interpreted by the shell.
Redirection may also be used to open and close files for the
current shell execution environment.  The following redirection
operators may precede or appear anywhere within a
.I simple command
or may follow a
.IR command .
Redirections are processed in the order they appear, from
left to right.
.PP
In the following descriptions, if the file descriptor number is
omitted, and the first character of the redirection operator is
.BR < ,
the redirection refers to the standard input (file descriptor
0).  If the first character of the redirection operator is
.BR > ,
the redirection refers to the standard output (file descriptor
1).
.PP
Note that the order of redirections is significant.  For example,
the command
.RS
.PP
ls \fB>\fP dirlist 2\fB>&\fP1
.RE
.PP
directs both standard output and standard error to the file
.IR dirlist ,
while the command
.RS
.PP
ls 2\fB>&\fP1 \fB>\fP dirlist
.RE
.PP
directs only the standard output to file
.IR dirlist ,
because the standard error was duplicated as standard output
before the standard output was redirected to
.IR dirlist .
.PP
\fB42sh\fP handles several filenames specially when they are used in
redirections, as described in the following table:
.RS
.PP
.PD 0
.TP
.B /dev/fd/\fIfd\fP
If \fIfd\fP is a valid integer, file descriptor \fIfd\fP is duplicated.
.TP
.B /dev/stdin
File descriptor 0 is duplicated.
.TP
.B /dev/stdout
File descriptor 1 is duplicated.
.TP
.B /dev/stderr
File descriptor 2 is duplicated.
.PP
A failure to open or create a file causes the redirection to fail.
.PP
Redirections using file descriptors greater than 9 should be used with
care, as they may conflict with file descriptors the shell uses
internally.
.SS Redirecting Input
.PP
Redirection of input causes the file whose name results from
the expansion of
.I word
to be opened for reading on file descriptor
.IR n ,
or the standard input (file descriptor 0) if
.I n
is not specified.
.PP
The general format for redirecting input is:
.RS
.PP
[\fIn\fP]\fB<\fP\fIword\fP
.RE
.SS Redirecting Output
.PP
Redirection of output causes the file whose name results from
the expansion of
.I word
to be opened for writing on file descriptor
.IR n ,
or the standard output (file descriptor 1) if
.I n
is not specified.  If the file does not exist it is created;
if it does exist it is truncated to zero size.
.PP
The general format for redirecting output is:
.RS
.PP
[\fIn\fP]\fB>\fP\fIword\fP
.RE
.SS Appending Redirected Output
.PP
Redirection of output in this fashion
causes the file whose name results from
the expansion of
.I word
to be opened for appending on file descriptor
.IR n ,
or the standard output (file descriptor 1) if
.I n
is not specified.  If the file does not exist it is created.
.PP
The general format for appending output is:
.RS
.PP
[\fIn\fP]\fB>>\fP\fIword\fP
.RE
.PP
.SS Redirecting Standard Output and Standard Error
.PP
.B 42sh
allows both the
standard output (file descriptor 1) and
the standard error output (file descriptor 2)
to be redirected to the file whose name is the
expansion of
.I word
with this construct.
.PP
There are two formats for redirecting standard output and
standard error:
.RS
.PP
\fB&>\fP\fIword\fP
.RE
and
.RS
\fB>&\fP\fIword\fP
.RE
.PP
Of the two forms, the first is preferred.
This is semantically equivalent to
.RS
.PP
\fB>\fP\fIword\fP 2\fB>&\fP1
.RE
.SS Here Documents
.PP
This type of redirection instructs the shell to read input from the
current source until a line containing only
.I word
(with no trailing blanks)
is seen.  All of
the lines read up to that point are then used as the standard
input for a command.
.PP
The format of here-documents is:
.RS
.PP
.nf
\fB<<\fP[\fB\-\fP]\fIword\fP
        \fIhere-document\fP
\fIdelimiter\fP
.fi
.RE
.PP
No parameter expansion, command substitution, arithmetic expansion,
or pathname expansion is performed on
.IR word .
If any characters in
.I word
are quoted, the
.I delimiter
is the result of quote removal on
.IR word ,
and the lines in the here-document are not expanded.
If \fIword\fP is unquoted,
all lines of the here-document are subjected to parameter expansion,
command substitution, and arithmetic expansion.  In the latter
case, the character sequence
.B \e<newline>
is ignored, and
.B \e
must be used to quote the characters
.BR \e ,
.BR $ ,
and
.BR ` .
.PP
If the redirection operator is
.BR <<\- ,
then all leading tab characters are stripped from input lines and the
line containing
.IR delimiter .
This allows
here-documents within shell scripts to be indented in a
natural fashion.
.SS "Duplicating File Descriptors"
.PP
The redirection operator
.RS
.PP
[\fIn\fP]\fB<&\fP\fIword\fP
.RE
.PP
is used to duplicate input file descriptors.
If
.I word
expands to one or more digits, the file descriptor denoted by
.I n
is made to be a copy of that file descriptor.
If the digits in
.I word
do not specify a file descriptor open for input, a redirection error occurs.
If
.I word
evaluates to
.BR \- ,
file descriptor
.I n
is closed.  If
.I n
is not specified, the standard input (file descriptor 0) is used.
.PP
The operator
.RS
.PP
[\fIn\fP]\fB>&\fP\fIword\fP
.RE
.PP
is used similarly to duplicate output file descriptors.  If
.I n
is not specified, the standard output (file descriptor 1) is used.
If the digits in
.I word
do not specify a file descriptor open for output, a redirection error occurs.
As a special case, if \fIn\fP is omitted, and \fIword\fP does not
expand to one or more digits, the standard output and standard
error are redirected as described previously.
.SS "Moving File Descriptors"
.PP
The redirection operator
.RS
.PP
[\fIn\fP]\fB<&\fP\fIdigit\fP\fB\-\fP
.RE
.PP
moves the file descriptor \fIdigit\fP to file descriptor
.IR n ,
or the standard input (file descriptor 0) if \fIn\fP is not specified.
\fIdigit\fP is closed after being duplicated to \fIn\fP.
.PP
Similarly, the redirection operator
.RS
.PP
[\fIn\fP]\fB>&\fP\fIdigit\fP\fB\-\fP
.RE
.PP
moves the file descriptor \fIdigit\fP to file descriptor
.IR n ,
or the standard output (file descriptor 1) if \fIn\fP is not specified.
.SS "Opening File Descriptors for Reading and Writing"
.PP
The redirection operator
.RS
.PP
[\fIn\fP]\fB<>\fP\fIword\fP
.RE
.PP
causes the file whose name is the expansion of
.I word
to be opened for both reading and writing on file descriptor
.IR n ,
or on file descriptor 0 if
.I n
is not specified.  If the file does not exist, it is created.

.SH ARITHMETIC EVALUATION
.P
The shell allows arithmetic expressions to be evaluated, under
certain circumstances.
Evaluation is done in fixed-width integers with no check for overflow,
though division by 0 is trapped and flagged as an error.
The operators and their precedence, associativity, and values
are the same as in the C language.
The following list of operators is grouped into levels of
equal-precedence operators.
The levels are listed in order of decreasing precedence.
.PP
.PD 0
.TP
.B \fIid\fP++ \fIid\fP\-\-
variable post-increment and post-decrement
.TP
.B ++\fIid\fP \-\-\fIid\fP
variable pre-increment and pre-decrement
.TP
.B \- +
unary minus and plus
.TP
.B ! ~
logical and bitwise negation
.TP
.B **
exponentiation
.TP
.B * / %
multiplication, division, remainder
.TP
.B + \-
addition, subtraction
.TP
.B << >>
left and right bitwise shifts
.TP
.B <= >= < >
comparison
.TP
.B == !=
equality and inequality
.TP
.B &
bitwise AND
.TP
.B ^
bitwise exclusive OR
.TP
.B |
bitwise OR
.TP
.B &&
logical AND
.TP
.B ||
logical OR
.TP
.B \fIexpr\fP?\fIexpr\fP:\fIexpr\fP
conditional operator
.TP
.B = *= /= %= += \-= <<= >>= &= ^= |=
assignment
.TP
.B \fIexpr1\fP , \fIexpr2\fP
comma
.PD
.PP
Shell variables are allowed as operands; parameter expansion is
performed before the expression is evaluated.
Within an expression, shell variables may also be referenced by name
without using the parameter expansion syntax.
A shell variable that is null or unset evaluates to 0 when referenced
by name without using the parameter expansion syntax.
A null value evaluates to 0.
A shell variable need not have its integer attribute
turned on to be used in an expression.
.PP
Operators are evaluated in order of precedence.  Sub-expressions in
parentheses are evaluated first and may override the precedence
rules above.

.SH SIMPLE COMMAND EXPANSION
.P
When a simple command is executed, the shell performs the following
expansions, assignments, and redirections, from left to right.
.IP 1.
The words that the parser has marked as variable assignments (those
preceding the command name) and redirections are saved for later
processing.
.IP 2.
The words that are not variable assignments or redirections are
expanded.  If any words remain after expansion, the first word
is taken to be the name of the command and the remaining words are
the arguments.
.IP 3.
Redirections are performed as described above under
.SM
.BR REDIRECTION .
.IP 4.
The text after the \fB=\fP in each variable assignment undergoes tilde
expansion, parameter expansion, command substitution, arithmetic expansion,
and quote removal before being assigned to the variable.
.PP
If no command name results, the variable assignments affect the current
shell environment.  Otherwise, the variables are added to the environment
of the executed command and do not affect the current shell environment.
If any of the assignments attempts to assign a value to a readonly variable,
an error occurs, and the command exits with a non-zero status.
.PP
If no command name results, redirections are performed, but do not
affect the current shell environment.  A redirection error causes the
command to exit with a non-zero status.
.PP
If there is a command name left after expansion, execution proceeds as
described below.  Otherwise, the command exits.  If one of the expansions
contained a command substitution, the exit status of the command is
the exit status of the last command substitution performed.  If there
were no command substitutions, the command exits with a status of zero.

.SH COMMAND EXECUTION
.P

After a command has been split into words, if it results in a
simple command and an optional list of arguments, the following
actions are taken.
.PP
If the command name contains no slashes,
.B 42sh
searches each element of the
.SM
.B PATH
for a directory containing an executable file by that name.
A full search of the directories in
.SM
.B PATH
is performed.
If the search is unsuccessful, the shell prints an error
message and returns an exit status of 127.
.PP
If the search is successful, or if the command name contains
one or more slashes, the shell executes the named program in a
separate execution environment.
Argument 0 is set to the name given, and the remaining arguments
to the command are set to the arguments given, if any.
.PP
If this execution fails because the file is not in executable
format, and the file is not a directory, it is assumed to be
a \fIshell script\fP, a file
containing shell commands.  A subshell is spawned to execute
it.  This subshell reinitializes itself, so
that the effect is as if a new shell had been invoked
to handle the script, with the exception that the locations of
commands remembered by the parent are retained by the child.
.PP
If the program is a file beginning with
.BR #! ,
the remainder of the first line specifies an interpreter
for the program.  The shell executes the
specified interpreter on operating systems that do not
handle this executable format themselves.  The arguments to the
interpreter consist of a single optional argument following the
interpreter name on the first line of the program, followed
by the name of the program, followed by the command
arguments, if any.

.SH COMMAND EXECUTION ENVIRONMENT
.P
The shell has an \fIexecution environment\fP, which consists of the
following:
.sp 1
.IP \(bu
open files inherited by the shell at invocation.
.IP \(bu
the current working directory as set by \fBcd\fP, or inherited by the shell
at invocation
.IP \(bu
options enabled by \fBshopt\fP
.PP
When a simple command other than a builtin or shell function
is to be executed, it
is invoked in a separate execution environment that consists of
the following.  Unless otherwise noted, the values are inherited
from the shell.
.sp 1
.IP \(bu
the shell's open files, plus any modifications and additions specified
by redirections to the command
.IP \(bu
the current working directory
.IP \(bu
shell variables marked for export, along with variables
exported for the command, passed in the environment
.PP
A command invoked in this separate environment cannot affect the
shell's execution environment.
.PP
Command substitution, commands grouped with parentheses,
and asynchronous commands are invoked in a
subshell environment that is a duplicate of the shell environment,
except that traps caught by the shell are reset to the values
that the shell inherited from its parent at invocation.  Builtin
commands that are invoked as part of a pipeline are also executed in a
subshell environment.  Changes made to the subshell environment
cannot affect the shell's execution environment.
.PP
If a command is followed by a \fB&\fP and job control is not active, the
default standard input for the command is the empty file \fI/dev/null\fP.
Otherwise, the invoked command inherits the file descriptors of the calling
shell as modified by redirections.

.SH ENVIRONMENT
.P
When a program is invoked it is given an array of strings
called the
.IR environment .
This is a list of
\fIname\fP\-\fIvalue\fP pairs, of the form
.IR "name\fR=\fPvalue" .
.PP
The shell provides several ways to manipulate the environment.
On invocation, the shell scans its own environment and
creates a parameter for each name found, automatically marking
it for
.I export
to child processes.  Executed commands inherit the environment.
The
.B export
command allow parameters to be added to and
deleted from the environment.  If the value of a parameter
in the environment is modified, the new value becomes part
of the environment, replacing the old.  The environment
inherited by any executed command consists of the shell's
initial environment, whose values may be modified in the shell,
less any pairs removed by the
.B export
command.
.PP
The environment for any
.I simple command
or function may be augmented temporarily by prefixing it with
parameter assignments, as described above in
.SM
.BR PARAMETERS .
These assignment statements affect only the environment seen
by that command.

.SH "EXIT STATUS"
For the shell's purposes, a command which exits with a
zero exit status has succeeded.  An exit status of zero
indicates success.  A non-zero exit status indicates failure.
.PP
If a command fails because of an error during expansion or redirection,
the exit status is greater than zero.
.PP
Shell builtin commands return a status of 0 (\fItrue\fP) if
successful, and non-zero (\fIfalse\fP) if an error occurs
while they execute.
All builtins return an exit status of 2 to indicate incorrect usage.
.PP
\fB42sh\fP itself returns the exit status zero.

.SH PROMPTING
.P
When executing interactively,
.B 42sh
displays the primary prompt
.SM
.B PS1
when it is ready to read a command, and the secondary prompt
.SM
.B PS2
when it needs more input to complete a command.
.B 42sh
allows these prompt strings to be customized by inserting a number of
backslash-escaped special characters that are decoded as follows:
.RS
.PD 0
.TP
.B \ea
an ASCII bell character (07)
.TP
.B \ed
the date in "Weekday Month Date" format (e.g., "Tue May 26")
.TP
.B \eD{\fIformat\fP}
the \fIformat\fP is passed to \fIstrftime\fP(3) and the result is inserted
into the prompt string; an empty \fIformat\fP results in a locale-specific
time representation.  The braces are required
.TP
.B \ee
an ASCII escape character (033)
.TP
.B \eh
the hostname up to the first `.'
.TP
.B \eH
the hostname
.TP
.B \en
newline
.TP
.B \er
carriage return
.TP
.B \es
the name of the shell, the basename of
.B $0
(the portion following the final slash)
.TP
.B \eu
the username of the current user
.TP
.B \ew
the current working directory, with \fB$HOME\fP abbreviated with a tilde
.TP
.B \eW
the basename of the current working directory, with \fB$HOME\fP
abbreviated with a tilde
.TP
.B \e$
if the effective UID is 0, a
.BR # ,
otherwise a
.B $
.TP
.B \e\fInnn\fP
the character corresponding to the octal number \fInnn\fP
.TP
.B \e\e
a backslash
.TP
.B \e[
begin a sequence of non-printing characters, which could be used to
embed a terminal control sequence into the prompt
.TP
.B \e]
end a sequence of non-printing characters
.PD
.RE

.SH READLINE
.P
This is the library that handles reading input when using an interactive
shell.
.SS "Readline Notation"
.PP
In this section, the emacs-style notation is used to denote
keystrokes.  Control keys are denoted by C\-\fIkey\fR, e.g., C\-n
means Control\-N.  Similarly,
.I meta
keys are denoted by M\-\fIkey\fR, so M\-x means Meta\-X.  (On keyboards
without a
.I meta
key, M\-\fIx\fP means ESC \fIx\fP, i.e., press the Escape key
then the
.I x
key.  This makes ESC the \fImeta prefix\fP.
The combination M\-C\-\fIx\fP means ESC\-Control\-\fIx\fP,
or press the Escape key
then hold the Control key while pressing the
.I x
key.)
.PP
Readline commands may be given numeric
.IR arguments ,
which normally act as a repeat count.
Sometimes, however, it is the sign of the argument that is significant.
Passing a negative argument to a command that acts in the forward
direction (e.g., \fBkill\-line\fP) causes that command to act in a
backward direction.
Commands whose behavior with arguments deviates from this are noted
below.
.PP
When a command is described as \fIkilling\fP text, the text
deleted is saved for possible future retrieval
(\fIyanking\fP).  The killed text is saved in a
\fIkill ring\fP.  Consecutive kills cause the text to be
accumulated into one unit, which can be yanked all at once.
Commands which do not kill text separate the chunks of text
on the kill ring.
.SS "Readline Command Names"
.PP
The following is a list of the names of the commands and the default
key sequences to which they are bound.
Command names without an accompanying key sequence are unbound by default.
In the following descriptions, \fIpoint\fP refers to the current cursor
position, and \fImark\fP refers to a cursor position saved by the
\fBset\-mark\fP command.
The text between the point and mark is referred to as the \fIregion\fP.
.SS Commands for Moving
.PP
.PD 0
.TP
.B beginning\-of\-line (C\-a)
Move to the start of the current line.
.TP
.B end\-of\-line (C\-e)
Move to the end of the line.
.TP
.B forward\-char (C\-f)
Move forward a character.
.TP
.B backward\-char (C\-b)
Move back a character.
.TP
.B forward\-word (M\-f)
Move forward to the end of the next word.  Words are composed of
alphanumeric characters (letters and digits).
.TP
.B backward\-word (M\-b)
Move back to the start of the current or previous word.  Words are
composed of alphanumeric characters (letters and digits).
.TP
.B clear\-screen (C\-l)
Clear the screen leaving the current line at the top of the screen.
With an argument, refresh the current line without clearing the
screen.
.PD
.SS Commands for Manipulating the History
.PP
.PD 0
.TP
.B accept\-line (Newline, Return)
Accept the line regardless of where the cursor is.  If this line is
non-empty, add it to the history list according to the state of the
.SM
.B HISTCONTROL
variable.  If the line is a modified history
line, then restore the history line to its original state.
.TP
.B previous\-history (C\-p)
Fetch the previous command from the history list, moving back in
the list.
.TP
.B next\-history (C\-n)
Fetch the next command from the history list, moving forward in the
list.
.TP
.B beginning\-of\-history (M\-<)
Move to the first line in the history.
.TP
.B end\-of\-history (M\->)
Move to the end of the input history, i.e., the line currently being
entered.
.PD
.SS Commands for Changing Text
.PP
.PD 0
.TP
.B delete\-char (C\-d)
Delete the character at point.  If point is at the
beginning of the line, there are no characters in the line, and
the last character typed was not bound to \fBdelete\-char\fP,
then return
.SM
.BR EOF .
.TP
.B backward\-delete\-char (Rubout)
Delete the character behind the cursor.  When given a numeric argument,
save the deleted text on the kill ring.
.PD
.SS Killing and Yanking
.PP
.PD 0
.TP
.B kill\-line (C\-k)
Kill the text from point to the end of the line.
.TP
.B kill\-word  (M\-d)
Kill from point to the end of the current word, or if between
words, to the end of the next word.
Word boundaries are the same as those used by \fBforward\-word\fP.
.TP
.B backward\-kill\-word (M\-Rubout)
Kill the word behind point.
Word boundaries are the same as those used by \fBbackward\-word\fP.
.TP
.B delete\-horizontal\-space (M\-\e)
Delete all spaces and tabs around point.
.TP
.B yank (C\-y)
Yank the top of the kill ring into the buffer at point.
.PD
.SS Miscellaneous
.PP
.PD 0
.TP
.B abort (C\-g)
Abort the current editing command and
ring the terminal's bell (subject to the setting of
.BR bell\-style ).
.TP
.B prefix\-meta (ESC)
Metafy the next character typed.
.SM
.B ESC
.B f
is equivalent to
.BR Meta\-f .

.SH HISTORY
.P
The shell provides access to the
\fIcommand history\fP,
the list of commands previously typed.
The value of the \fBHISTSIZE\fP variable is used as the
number of commands to save in a history list.
The text of the last
.SM
.B HISTSIZE
commands (default 512) is saved.  The shell
stores each command in the history list prior to parameter and
variable expansion (see
.SM
.B EXPANSION
above) but after history expansion is performed, subject to the
values of the shell variables
.SM
.B HISTIGNORE
and
.SM
.BR HISTCONTROL .
.PP
On startup, the history is initialized from the file named by
the variable
.SM
.B HISTFILE
(default \fI~/.42sh_history\fP).
The file named by the value of
.SM
.B HISTFILE
is truncated, if necessary, to contain no more than
the number of lines specified by the value of
.SM
.BR HISTFILESIZE .
When an interactive shell exits, the last
.SM
.B $HISTSIZE
lines are copied from the history list to
.SM
.BR $HISTFILE .
If the
.B histappend
shell option is enabled
(see the description of
.B shopt
under
.SM
.B "SHELL BUILTIN COMMANDS"
below), the lines are appended to the history file,
otherwise the history file is overwritten.
If
.SM
.B HISTFILE
is unset, or if the history file is unwritable, the history is
not saved.  After saving the history, the history file is truncated
to contain no more than
.SM
.B HISTFILESIZE
lines.  If
.SM
.B HISTFILESIZE
is not set, no truncation is performed.

.SH SHELL BUILTIN COMMANDS
.P
.PP
Unless otherwise noted, each builtin command documented in this
section as accepting options preceded by
.B \-
accepts
.B \-\-
to signify the end of the options.
For example, the \fB:\fP, \fBtrue\fP, \fBfalse\fP, and \fBtest\fP builtins
do not accept options.
.sp .5
.PD 0
.TP
\fB .\| \fP \fIfilename\fP [\fIarguments\fP]
.PD 0
.TP
\fBsource\fP \fIfilename\fP [\fIarguments\fP]
.PD
Read and execute commands from
.I filename
in the current
shell environment and return the exit status of the last command
executed from
.IR filename .
If
.I filename
does not contain a slash, file names in
.SM
.B PATH
are used to find the directory containing
.IR filename .
The file searched for in
.SM
.B PATH
need not be executable.
If the
.B sourcepath
option to the
.B shopt
builtin command is turned off, the
.SM
.B PATH
is not searched.
If any \fIarguments\fP are supplied, they become the positional
parameters when \fIfilename\fP is executed.  Otherwise the positional
parameters are unchanged.
The return status is the status of the last command exited within
the script (0 if no commands are executed), and false if
.I filename
is not found or cannot be read.
.TP
\fBalias\fP [\fB\-p\fP] [\fIname\fP[=\fIvalue\fP] ...]
\fBAlias\fP prints the list of aliases in the form
\fBalias\fP \fIname\fP=\fIvalue\fP on standard output.
When arguments are supplied, an alias is defined for
each \fIname\fP whose \fIvalue\fP is given.
A trailing space in  \fIvalue\fP causes the next word to be
checked for alias substitution when the alias is expanded.
For each \fIname\fP in the argument list for which no \fIvalue\fP
is supplied, the name and value of the alias is printed.
\fBAlias\fP returns true unless a \fIname\fP is given for which
no alias has been defined.
.TP
\fBbreak\fP [\fIn\fP]
Exit from within a
.BR for ,
.BR while ,
.BR until ,
or
.B select
loop.  If \fIn\fP is specified, break \fIn\fP levels.
.I n
must be \(>= 1.  If
.I n
is greater than the number of enclosing loops, all enclosing loops
are exited.  The return value is 0 unless the shell is not executing
a loop when
.B break
is executed.
.TP
\fBcd\fP [\fB\-L|-P\fP] [\fIdir\fP]
Change the current directory to \fIdir\fP.  The variable
.SM
.B HOME
is the
default
.IR dir .
The variable
.SM
.B CDPATH
defines the search path for the directory containing
.IR dir .
Alternative directory names in
.SM
.B CDPATH
are separated by a colon (:).  A null directory name in
.SM
.B CDPATH
is the same as the current directory, i.e., ``\fB.\fP''.  If
.I dir
begins with a slash (/),
then
.SM
.B CDPATH
is not used. The
.B \-P
option says to use the physical directory structure instead of
following symbolic links (see also the
.B \-P
option to the
.B set
builtin command); the
.B \-L
option forces symbolic links to be followed.  An argument of
.B \-
is equivalent to
.SM
.BR $OLDPWD .
If a non-empty directory name from \fBCDPATH\fP is used, or if
\fB\-\fP is the first argument, and the directory change is
successful, the absolute pathname of the new working directory is
written to the standard output.
The return value is true if the directory was successfully changed;
false otherwise.
.TP
\fBcontinue\fP [\fIn\fP]
Resume the next iteration of the enclosing
.BR for ,
.BR while ,
.BR until ,
or
.B select
loop.
If
.I n
is specified, resume at the \fIn\fPth enclosing loop.
.I n
must be \(>= 1.  If
.I n
is greater than the number of enclosing loops, the last enclosing loop
(the ``top-level'' loop) is resumed.  The return value is 0 unless the
shell is not executing a loop when
.B continue
is executed.
.TP
\fBecho\fP [\fB\-neE\fP] [\fIarg\fP ...]
Output the \fIarg\fPs, separated by spaces, followed by a newline.
The return status is always 0.
If \fB\-n\fP is specified, the trailing newline is
suppressed.  If the \fB\-e\fP option is given, interpretation of
the following backslash-escaped characters is enabled.  The
.B \-E
option disables the interpretation of these escape characters,
even on systems where they are interpreted by default.
The \fBxpg_echo\fP shell option may be used to
dynamically determine whether or not \fBecho\fP expands these
escape characters by default.
.B echo
does not interpret \fB\-\-\fP to mean the end of options.
.B echo
interprets the following escape sequences:
.RS
.PD 0
.TP
.B \ea
alert (bell)
.TP
.B \eb
backspace
.TP
.B \ec
suppress trailing newline
.TP
.B \ee
an escape character
.TP
.B \ef
form feed
.TP
.B \en
new line
.TP
.B \er
carriage return
.TP
.B \et
horizontal tab
.TP
.B \ev
vertical tab
.TP
.B \e\e
backslash
.TP
.B \e0\fInnn\fP
the eight-bit character whose value is the octal value \fInnn\fP
(zero to three octal digits)
.TP
.B \ex\fIHH\fP
the eight-bit character whose value is the hexadecimal value \fIHH\fP
(one or two hex digits)
.PD
.RE
.TP
\fBexit\fP [\fIn\fP]
Cause the shell to exit
with a status of \fIn\fP.  If
.I n
is omitted, the exit status
is that of the last command executed.
A trap on
.SM
.B EXIT
is executed before the shell terminates.
.TP
\fBexport\fP [\fB\-fn\fP\^] [\fIname\fP[=\fIword\fP]] ...
.PD 0
.TP
.B export \-p
.PD
The supplied
.I names
are marked for automatic export to the environment of
subsequently executed commands.  If the
.B \-f
option is given,
the
.I names
refer to functions.
If no
.I names
are given, or if the
.B \-p
option is supplied, a list
of all names that are exported in this shell is printed.
The
.B \-n
option causes the export property to be removed from each
\fIname\fP.
If a variable name is followed by =\fIword\fP, the value of
the variable is set to \fIword\fP.
.B export
returns an exit status of 0 unless an invalid option is
encountered,
one of the \fInames\fP is not a valid shell variable name, or
.B \-f
is supplied with a
.I name
that is not a function.
.TP
\fBhistory [\fIn\fP]
.PD 0
.TP
\fBhistory\fP \fB\-c\fP
.TP
\fBhistory\fP \fB\-r\fP [\fIfilename\fP]
.PD
With no options, display the command
history list with line numbers.  Lines listed
with a
.B *
have been modified.  An argument of
.I n
lists only the last
.I n
lines.
If \fIfilename\fP is supplied, it is used as the
name of the history file; if not, the value of
.SM
.B HISTFILE
is used.  Options, if supplied, have the following meanings:
.RS
.PD 0
.TP
.B \-c
Clear the history list by deleting all the entries.
.TP
.B \-r
Read the contents of the history file
and use them as the current history.
.TP
\fBshopt\fP [\fB\-qsu\fP] [\fIoptname\fP ...]
Toggle the values of variables controlling optional shell behavior.
With no options, a list of all settable options is displayed, with
an indication of whether or not each is set.
Other options have the following meanings:
.RS
.PD 0
.TP
.B \-s
Enable (set) each \fIoptname\fP.
.TP
.B \-u
Disable (unset) each \fIoptname\fP.
.TP
.B \-q
Suppresses normal output (quiet mode); the return status indicates
whether the \fIoptname\fP is set or unset.
If multiple \fIoptname\fP arguments are given with
.BR \-q ,
the return status is zero if all \fIoptnames\fP are enabled; non-zero
otherwise.
.PD
.PP
If either
.B \-s
or
.B \-u
is used with no \fIoptname\fP arguments, the display is limited to
those options which are set or unset, respectively.
Unless otherwise noted, the \fBshopt\fP options are disabled (unset)
by default.
.PP
The return status when listing options is zero if all \fIoptnames\fP
are enabled, non-zero otherwise.  When setting or unsetting options,
the return status is zero unless an \fIoptname\fP is not a valid shell
option.
.PP
The list of \fBshopt\fP options is:
.sp 1v
.PD 0
.TP 8
.B ast_print
If set,
.B 42sh
prints the ast in a PNG file.
.TP 8
.B dotglob
If set,
.B 42sh
includes filenames beginning with a `.' in the results of pathname
expansion.
.TP 8
.B expand_aliases
If set, aliases are expanded.
This option is enabled by default for interactive shells.
.TP 8
.B extglob
If set, the extended pattern matching features are enabled.
.TP 8
.B nocaseglob
If set,
.B 42sh
matches filenames in a case\-insensitive fashion
.TP 8
.B nullglob
If set,
.B 42sh
allows patterns which match no
files to expand to a null string, rather than themselves.
.TP 8
.B sourcepath
If set, the
\fBsource\fP (\fB.\fP) builtin uses the value of
.SM
.B PATH
to find the directory containing the file supplied as an argument.
This option is enabled by default.
.TP 8
.B xpg_echo
If set, the \fBecho\fP builtin expands backslash-escape sequences
by default.
.RE
.TP
\fBunalias\fP [\-\fBa\fP] [\fIname\fP ...]
Remove each \fIname\fP from the list of defined aliases.  If
.B \-a
is supplied, all alias definitions are removed.  The return
value is true unless a supplied
.I name
is not a defined alias.

.SH SEE ALSO
.P
\fB42sh\fR respects the standard SCL (Shell Command Langage) specify in
chapter 2 of volume XCU in susv3.
.P
	\fIhttp://www.opengroup.org/onlinepubs/009695399/\fR
.TP
\fIsh\fP(1), \fIbash\fP(1)
.TP
\fIreadline\fP(3)

.SH FILES
.PP
\fI42sh\fP
.TP
The \fB42sh\fP executable
.PP
\fI~/.42sh_history\fP
.TP
The systemwide commands' history file.

.SH AUTHORS
.P
\fB42sh\fR was made by :

\- Maarek Joseph \fBmaarek_l\fR\fI@\fR\fBepita.fr\fR

\- Adolphi Melanie \fBadolph_a\fR\fI@\fR\fBepita.fr\fR

\- Karsenty Joseph \fBkarsen_j\fR\fI@\fR\fBepita.fr\fR

\- Lanoe Jean\-Christophe \fBlanoe_j\fR\fI@\fR\fBepita.fr\fR

\- Mazaheri Micha. \fBmazahe_m\fR\fI@\fR\fBepita.fr\fR
.P
Group 46782.
.P
Students of EPITA, promotion 2013.

.SH BUG REPORTS
If you find a bug in
.B 42sh,
you should report it to one of the author of the project.
But first, you should make sure that it really is a bug, and that it appears
in the latest version of
.BR 42sh .
